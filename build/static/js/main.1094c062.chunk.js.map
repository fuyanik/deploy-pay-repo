{"version":3,"sources":["CheckoutForm.jsx","App.jsx","index.js"],"names":["CheckoutForm","stripe","useStripe","elements","useElements","useState","message","setMessage","isLoading","setIsLoading","useEffect","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","handleSubmit","e","preventDefault","confirmPayment","confirmParams","return_url","error","type","id","onSubmit","disabled","className","stripePromise","loadStripe","App","setClientSecret","fetch","method","headers","body","JSON","stringify","items","res","json","data","options","appearance","theme","ReactDOM","render","document","getElementById"],"mappings":";0/MAOe,SAASA,IACtB,IAAMC,EAASC,sBACTC,EAAWC,wBAEjB,EAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,GAAKT,EAAL,CAIA,IAAMU,EAAe,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAC/D,gCAGGL,GAILV,EAAOgB,sBAAsBN,GAAcO,MAAK,YAC9C,OADqE,EAApBC,cAC3BC,QACpB,IAAK,YACHb,EAAW,sBACX,MACF,IAAK,aACHA,EAAW,+BACX,MACF,IAAK,0BACHA,EAAW,sDACX,MACF,QACEA,EAAW,gCAIhB,CAACN,IAEJ,IAAMoB,EAAY,uCAAG,WAAOC,GAAP,4EACnBA,EAAEC,iBAEGtB,GAAWE,EAHG,wDASnBM,GAAa,GATM,SAWKR,EAAOuB,eAAe,CAC5CrB,WACAsB,cAAe,CAEbC,WAAY,2BAfG,gBAwBA,gBAbXC,EAXW,EAWXA,OAaEC,MAAwC,qBAAfD,EAAMC,KACvCrB,EAAWoB,EAAMrB,SAEjBC,EAAW,iCAGbE,GAAa,GA9BM,4CAAH,sDAiClB,OACE,0BAAMoB,GAAG,eAAeC,SAAUT,GAChC,kBAAC,iBAAD,CAAgBQ,GAAG,oBACnB,4BAAQE,SAAUvB,IAAcP,IAAWE,EAAU0B,GAAG,UACtD,0BAAMA,GAAG,eACNrB,EAAY,yBAAKwB,UAAU,UAAUH,GAAG,YAAmB,YAI/DvB,GAAW,yBAAKuB,GAAG,mBAAmBvB,I,UC7EvC2B,EAAgBC,YAAW,+GAElB,SAASC,IACtB,MAAwC9B,mBAAS,IAAjD,mBAAOM,EAAP,KAAqByB,EAArB,KAEA1B,qBAAU,WAER2B,MAAM,yBAA0B,CAC9BC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,MAAO,CAAC,CAAEd,GAAI,kBAEpCX,MAAK,SAAC0B,GAAD,OAASA,EAAIC,UAClB3B,MAAK,SAAC4B,GAAD,OAAUV,EAAgBU,EAAKnC,mBACtC,IAEH,IAGMoC,EAAU,CACdpC,eACAqC,WALiB,CACjBC,MAAO,WAOT,OACE,yBAAKjB,UAAU,OACZrB,GACC,kBAAC,WAAD,CAAUoC,QAASA,EAAS9C,OAAQgC,GAClC,kBAACjC,EAAD,QCjCVkD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.1094c062.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\n      \"payment_intent_client_secret\"\n    );\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\",\n      },\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <PaymentElement id=\"payment-element\" />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}","import React, { useState, useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\n\nimport CheckoutForm from \"./CheckoutForm\";\nimport \"./App.css\";\n\n// Make sure to call loadStripe outside of a componentâ€™s render to avoid\n// recreating the Stripe object on every render.\n// This is your test publishable API key.\nconst stripePromise = loadStripe(\"pk_test_51LOrQYKGr3XuaAt4k9NHq0fW5AMPq71nMA6c9SIPVvRXadetwvACfgR4Fk5gk6zs6hnHrH0VdqevAoMHa8f9s2PB00txc9mDlI\");\n\nexport default function App() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ items: [{ id: \"xl-tshirt\" }] }),\n    })\n      .then((res) => res.json())\n      .then((data) => setClientSecret(data.clientSecret));\n  }, []);\n\n  const appearance = {\n    theme: 'stripe',\n  };\n  const options = {\n    clientSecret,\n    appearance,\n  };\n\n  return (\n    <div className=\"App\">\n      {clientSecret && (\n        <Elements options={options} stripe={stripePromise}>\n          <CheckoutForm />\n        </Elements>\n      )}\n    </div>\n  );\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}